DROP DATABASE IF EXISTS Testing_System_Assigment_1;
CREATE DATABASE Testing_System_Assigment_1;
USE Testing_System_Assigment_1;

DROP TABLE IF EXISTS `Department`;
CREATE TABLE `Department` (
	DepartmentID 			INT PRIMARY KEY,
    DepartmentName			VARCHAR(30) NOT NULL UNIQUE KEY
    );

DROP TABLE IF EXISTS `Position`;  
CREATE TABLE `Position` (
	PositionID 				TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    PositionName			ENUM('Dev', 'Test', 'Scrum Master', 'PM') NOT NULL UNIQUE KEY
    );
    
DROP TABLE IF EXISTS `Account`; 
CREATE TABLE `Account` (
	AccountID				TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    Email					VARCHAR(50) NOT NULL UNIQUE KEY,
    Username				VARCHAR(50) NOT NULL UNIQUE KEY,
    FullName				VARCHAR(100) NOT NULL UNIQUE KEY,
    DepartmentID			INT NOT NULL,
    PositionID				TINYINT UNSIGNED NOT NULL,
    CreateDate				DATE NOT NULL,
	FOREIGN KEY (DepartmentID) REFERENCES  `Department`(DepartmentID) ON DELETE CASCADE,
	FOREIGN KEY (PositionID) REFERENCES  `Position`(PositionID) ON DELETE CASCADE
);

DROP TABLE IF EXISTS `Group`;
CREATE TABLE `Group` (
	GroupID					TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    GroupName				VARCHAR(50) NOT NULL UNIQUE KEY,
    CreatorID				TINYINT NOT NULL UNIQUE KEY,
    CreateDate				DATE NOT NULL
);

DROP TABLE IF EXISTS `GroupAccount`;
CREATE TABLE `GroupAccount` (
	GroupID					TINYINT UNSIGNED NOT NULL,
    AccountID				TINYINT UNSIGNED AUTO_INCREMENT,
    JoinDate				DATE NOT NULL,
	FOREIGN KEY (GroupID) REFERENCES  `Group`(GroupID) ON DELETE CASCADE,
    FOREIGN KEY (AccountID) REFERENCES  `Account`(AccountID) ON DELETE CASCADE
);

DROP TABLE IF EXISTS `TypeQuestion`;
CREATE TABLE `TypeQuestion` (
	TypeID					TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    TypeName				ENUM('Essay', 'Multiple-Choice') NOT NULL
);

DROP TABLE IF EXISTS `CategoryQuestion`;
CREATE TABLE `CategoryQuestion` (
	CategoryID 				TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    CategoryName			ENUM('Java', '.NET', 'SQL', 'Postman', 'Ruby')
);

DROP TABLE IF EXISTS `Question`;
CREATE TABLE `Question` (
	QuestionID			TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	Content				VARCHAR(100) NOT NULL UNIQUE KEY,
	CategoryID			TINYINT UNSIGNED NOT NULL,
	TypeID 				TINYINT UNSIGNED NOT NULL,
	CreatorID			TINYINT NOT NULL NOT NULL,
	CreateDate			DATE NOT NULL,
    FOREIGN KEY (CategoryID) REFERENCES  `CategoryQuestion`(CategoryID) ON DELETE CASCADE,
    FOREIGN KEY (TypeID) REFERENCES  `TypeQuestion`(TypeID) ON DELETE CASCADE,
    FOREIGN KEY (CreatorID) REFERENCES  `Group`(CreatorID) ON DELETE CASCADE
);
 
DROP TABLE IF EXISTS `Answer`;
CREATE TABLE `Answer` (
	AnswerID			TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    Content				VARCHAR(100) NOT NULL UNIQUE KEY,
    QuestionID			TINYINT UNSIGNED NOT NULL,
    isCorrect			BOOLEAN NOT NULL,
	FOREIGN KEY (QuestionID) REFERENCES  `Question`(QuestionID) ON DELETE CASCADE
);

DROP TABLE IF EXISTS `Exam`;
CREATE TABLE `Exam` (
	ExamID 				TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    `Code`				TINYINT NOT NULL UNIQUE KEY,
    Title				VARCHAR(50) NOT NULL UNIQUE KEY,
    CategoryID			TINYINT UNSIGNED NOT NULL,
    Duration			TIME NOT NULL,
    CreatorID			TINYINT NOT NULL,
    CreateDate			DATE NOT NULL,
	FOREIGN KEY (CategoryID) REFERENCES  `CategoryQuestion`(CategoryID) ON DELETE CASCADE,
    FOREIGN KEY (CreatorID) REFERENCES  `Group`(CreatorID) ON DELETE CASCADE
);

DROP TABLE IF EXISTS `ExamQuestion`;
CREATE TABLE `ExamQuestion` (
	ExamID				TINYINT UNSIGNED NOT NULL,
    QuestionID			TINYINT UNSIGNED NOT NULL,
    FOREIGN KEY (ExamID) REFERENCES  `Exam`(ExamID) ON DELETE CASCADE,
    FOREIGN KEY (QuestionID) REFERENCES  `Question`(QuestionID) ON DELETE CASCADE
);